{"version":3,"sources":["serviceWorker.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","history","Array","fill","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","winner","moves","map","move","desc","key","jumpTo","handleClick","lines","a","b","c","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.976586de.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n//import App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nfunction Square(props) {\t\n\t\treturn(\n\t\t\t<button className=\"square\" \n\t\t\t\t\tonClick={props.onClick}\n\t\t\t>\n\t\t\t\t{props.value}\n\t\t\t</button>\n\t\t\t);\n}\nclass Board extends React.Component {\n\t\n\trenderSquare(i){\n\t\treturn( \n\t\t\t<Square \n\t\t\t\tvalue={this.props.squares[i]} \n\t\t\t\tonClick={()=>this.props.onClick(i)}\n\t\t\t/>\n\t\t);\n\t}\n\n\trender(){\n\t\treturn(\n\t\t\t<div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(0)}\n\t\t\t\t\t{this.renderSquare(1)}\n\t\t\t\t\t{this.renderSquare(2)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(3)}\n\t\t\t\t\t{this.renderSquare(4)}\n\t\t\t\t\t{this.renderSquare(5)}\n\t\t\t\t</div>\n\t\t\t\t<div className=\"board-row\">\n\t\t\t\t\t{this.renderSquare(6)}\n\t\t\t\t\t{this.renderSquare(7)}\n\t\t\t\t\t{this.renderSquare(8)}\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nclass Game extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.state ={\n\t\t\thistory:[{\n\t\t\t\tsquares:Array(9).fill(null)\n\t\t\t}],\n\t\t\tstepNumber:0,\n\t\t\txIsNext:true,\n\t\t}\n\t}\n\thandleClick(i){\n\t\t\tconst history =this.state.history.slice(0, this.state.stepNumber + 1);\n\t\t\tconst current =history[history.length - 1];\n\t\t\tconst squares=current.squares.slice();\n\t\t\tif (calculateWinner(squares)||squares[i])\n\t\t\t{\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tsquares[i]=this.state.xIsNext ? 'X':'O';\n\t\t\tthis.setState({\n\t\t\t\thistory:history.concat([{\n\t\t\t\t\tsquares:squares\n\t\t\t\t}]),\n\t\t\t\tstepNumber: history.length,\n\t\t\t\txIsNext:!this.state.xIsNext\n\t\t\t});\n\t}\n\tjumpTo(step){\n\t\tthis.setState({\n\t\t\tstepNumber: step,\n\t\t\txIsNext: (step % 2) === 0\n\t\t});\n\t}\n\trender()\n\t{\n\t\tconst history = this.state.history;\n\t\tconst current = history[this.state.stepNumber];\n\t\tconst winner = calculateWinner(current.squares);\n\t\tconst moves = history.map((step, move)=>{\n\t\t\tconst desc = move ? 'Move #' + move : 'Go to game start';\n\t\t\treturn(\n\t\t\t\t<li key={move}>\n\t\t\t\t\t<button onClick={() => this.jumpTo(move)}>{desc}</button>\n\t\t\t\t</li>\n\t\t\t);\n\t\t});\n\t\tlet status;\n\t\tif(winner)\n\t\t{\n\t\t\tif(winner=='X')\n\t\t\t{\n\t\t\t\tstatus= 'Player 1 HAS WON!';\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tstatus= 'Player 2 HAS WON!';\n\t\t\t}\n\t\t\t\n\t\t}\n\t\telse\n\t\t{\n\t\t\tstatus='Next Player: ' + (this.state.xIsNext ? 'Player 1':'Player 2') ;\n\t\t}\n\n\t\treturn(\n\t\t\t<div className=\"game\">\n\t\t\t\t<div className=\"status\">\n\t\t\t\t\t<span>{status}</span>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-board\">\n\t\t\t\t\t<Board\n\t\t\t\t\t\tsquares={current.squares}\n\t\t\t\t\t\tonClick={(i)=>this.handleClick(i)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t<div className=\"game-info\">\n\t\t\t\t\t\n\t\t\t\t\t<ol>{moves}</ol>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\nReactDOM.render(\n  <Game/>,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n\tconst lines = [\n\t\t[0,1,2],\n\t\t[3,4,5],\n\t\t[6,7,8],\n\t\t[0,3,6],\n\t\t[1,4,7],\n\t\t[2,5,8],\n\t\t[0,4,8],\n\t\t[2,4,6],\n\t];\n\tfor (let i=0; i < lines.length; i++) {\n\t\tconst [a,b,c] = lines[i];\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c])\n\t\t{\n\t\t\treturn squares[a];\n\t\t}\n\t}\n\treturn null;\n}\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}